☐ TP page clients
  ☐ créer un enum (db.json) ACTIVE INACTIVE
  ☐ créer une interface ClientI (db.json)
  ☐ model Client avec comme valeur par défaut la tva à 20 et le state à StateClient.ACTIVE
  ☐ créer ClientsService en prenant exemple sur OrdersService
  ☐ compléter PageClientsComponent.ts et .html en prenant exemple sur PageOrdersComponent
  ☐ pour le html utiliser template-one-col, table-dark ou table-light, app-text-bandeau, le meme directive appState, créez

un Pipe qui return le total ttc à partir de totalCaHt. Pour les colones du tableau [name, total ht, tva, total ttc, state]


☐ TP theme 2
  ☐ créer un service dans core/ ThemeService
  ☐ sur ce service, une variable theme$: BehaviorSubject<string> = new BehaviorSubject('theme1')
  ☐ sur ce service une fonction qui récupère un param string et qui modifie le flux de donnée : this.theme$.next(param)
  ☐ dans header component ts
    ☐ injection de ThemeService (private ts: ThemeService)
    ☐ créer fonction changeTheme(event) qui appel this.ts.changeTheme(event.target.value)
    ☐ dans le html ajouter un select avec 2 option pour value theme1 et value theme2
    ☐ sur le select ajouter un (change)="changeTheme($event)"
  ☐ dans app component ts
    ☐ injecter ThemeService (private ts: ThemeService)
    ☐ créer une variable theme: string;
    ☐ souscrire à this.ts.theme$ pour affecter la valeur du subscribe à la variable theme
    ☐ dans le html sur la balise <app-ui> ajouter une [ngClass]="{'theme2': theme === 'theme2'}" (edited)
